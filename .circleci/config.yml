version: 2.1
jobs:
  build:
    docker:
      - image: circleci/php:7.3-node-browsers
      # PostgresをcircleCIにインストールする
      - image: circleci/postgres:11.6-alpine
        # PostgreSQLのコンテナに対する環境変数
        environment:
          POSTGRES_DB: larasns
          POSTGRES_USER: default
          POSTGRES_PASSWORD: secret
    # buildジョブ全体に適用される環境変数。LaravelがPostgreSQLのDockerコンテナに接続できるよう設定
    environment:
      APP_ENV: testing
      DB_CONNECTION: pgsql
      DB_HOST: localhost
      DB_PORT: 5432
      DB_DATABASE: larasns
      DB_USERNAME: default
      DB_PASSWORD: secret

    steps:
      # checkout : GitHubからCircleCIの環境にソースコードをコピー
      - checkout
      # CircleCIの環境にcomposerとかをインストールする
      - run: sudo composer self-update --1

      # 保存されたキャッシュを復元する。keyには、復元するキャッシュの名前を指定
      - restore_cache:
          key: composer-v1-{{ checksum "composer.lock" }}
      # npmについてもキャッシュを復元する。キャッシュが存在すれば下記が走る
      - restore_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}

      - run: composer install -n --prefer-dist

      # keyに指定した名前でキャッシュを保存。パッケージをキャッシュ(記憶)しておいてビルドを早くする
      - save_cache:
          # checksumはCircleCIのテンプレート機能。{{ checksum "ファイル名" }}とすることで、ファイルをハッシュ化した値を算出
          key: composer-v1-{{ checksum "composer.lock" }}
          # 保存するディレクトリ名やファイル名はpathsへ記述
          paths:
          - vendor

      # npmをインストール
      - run:
          name: npm ci
          # シェルスクリプトのif文による条件を追加
          # npm ciコマンドでは、パッケージをインストールする前にいったんnode_modulesディレクトリを削除してしまうから
          command: | # 複数行に渡ってコマンドを記述する時。[]は必須で省略不可。
            if [ ! -d node_modules ]; then
              npm ci
            fi 
      # npmライブラリをキャッシュで保存する
      - save_cache:
          key: npm-v1-{{ checksum "package-lock.json" }}
          paths:
            - node_modules

      - run: npm run dev

      # Postgres用。LaravelがPostgreSQLに接続するのに必要なソフトウェアのインストールなどを行う
      # コンテナからPostgreSQLのコンテナに通信できるかの確認も行なっている
      - run:
          name: get ready for postgres
          command: |
            sudo apt-get update
            sudo apt-get install libpq-dev
            sudo docker-php-ext-install pdo_pgsql
            dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: php test
          command: vendor/bin/phpunit

  # composer.lockに変更が無い限りは、restore_chacheでは「前回以前のCircleCI実行時のsave_cacheで保存されたキャッシュ」を復元する
  # composer.lockに何か変更があれば、restore_chacheではキャッシュを復元せず、save_cacheで新しいkeyにてキャッシュを保存し直す